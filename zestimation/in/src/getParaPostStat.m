% comparing old rival estimates with each other 
close all;
clear all;
format compact; format long;
addpath(genpath('../')) % local lib codes
addpath(genpath('../../../../../lib/matlab/')) % lib codes

outPath = '../../postproc/parapost/';
if ~exist(outPath,'dir')
    mkdir(outPath)
end

nFile = 3;
StarFormationRate = { 'HB06' , 'Li08' , 'BB10' };
LegendName = { 'H06' , 'L08' , 'B10' };
ParaPost = cell(nFile,1);

% generate data for Latex table
VarNameMatlab = { 'log_{10}( Parameter Posterior Probability )' ...
                , 'Mean: \mu( log_{10}( L_{iso} [ ergs / s ] ) )' ...
                , 'Mean: \mu( log_{10}( E_{pz} [ keV ] ) )' ...
                , 'Mean: \mu( log_{10}( E_{iso} [ ergs ] ) )' ...
                , 'Mean: \mu( log_{10}( T_{90z} [ s ] ) )' ...
                , 'Standard Deviation: \sigma( log_{10}( L_{iso} [ ergs / s ] ) )' ...
                , 'Standard Deviation: \sigma( log_{10}( E_{pz} [ keV ] ) )' ...
                , 'Standard Deviation: \sigma( log_{10}( E_{iso} [ ergs ] ) )' ...
                , 'Standard Deviation: \sigma( log_{10}( T_{90z} [ s ] ) )' ...
                , 'Pearson Correlation Coefficient: L_{iso} - E_{pz}' ...
                , 'Pearson Correlation Coefficient: L_{iso} - E_{iso}' ...
                , 'Pearson Correlation Coefficient: L_{iso} - T_{90z}' ...
                , 'Pearson Correlation Coefficient: E_{pz} - E_{iso}' ...
                , 'Pearson Correlation Coefficient: E_{pz} - T_{90z}' ...
                , 'Pearson Correlation Coefficient: E_{iso} - T_{90z}' ...
                , 'Detection Efficiency Mean: \mu_{th}' ... [ ph/s/cm^2 ]
                , 'Detection Efficiency Standard Deviation: \sigma_{th}' ...
                };

for iFile = 1:nFile

    %ParaPost{iFile}.outPath = [outPath,StarFormationRate{iFile},'/'];
    %if ~exist(ParaPost{iFile}.outPath,'dir')
    %    mkdir(ParaPost{iFile}.outPath)
    %end

    ParaPost{iFile}.fileName = ['paraPost',StarFormationRate{iFile},'.csv'];
    ParaPost{iFile}.Sample = importdata( ParaPost{iFile}.fileName );

    % make location values in Log10 instead of Log
    ParaPost{iFile}.Sample.data(:,1:5) = ParaPost{iFile}.Sample.data(:,1:5) / log(10.0);

    % make variable's standard deviations normal
    ParaPost{iFile}.Sample.data(:,6:9) = exp( ParaPost{iFile}.Sample.data(:,6:9) ) / log(10.0);
    %ParaPost{iFile}.Sample.data(:,6:9) = log10( ParaPost{iFile}.Sample.data(:,6:9) / log(10.0) );

    % undo Fisher-transform of the correlations
    ParaPost{iFile}.Sample.data(:,10:15) = tanh( ParaPost{iFile}.Sample.data(:,10:15) );

    % make detection threshold's mean and standard deviation also in Log10
    ParaPost{iFile}.Sample.data(:,16) = ParaPost{iFile}.Sample.data(:,16) / log(10.0);
    ParaPost{iFile}.Sample.data(:,17) = exp( ParaPost{iFile}.Sample.data(:,17) ) / log(10.0);

    ParaPost{iFile}.Avg = mean( ParaPost{iFile}.Sample.data )';
    ParaPost{iFile}.Med = median( ParaPost{iFile}.Sample.data )';
    ParaPost{iFile}.Std = std( ParaPost{iFile}.Sample.data )';

    disp(['SFR: ',StarFormationRate{iFile}]);
    disp(['    Avg: ',num2str(ParaPost{iFile}.Avg')]);
    disp(['    Med: ',num2str(ParaPost{iFile}.Med')]);
    disp(['    Std: ',num2str(ParaPost{iFile}.Std')]);

end

nvar = length(ParaPost{1}.Avg);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% generate data for Latex table
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

VarNameLatex =  { '\mu_{\logten(\liso)}' ...
                , '\mu_{\logten(\epkz)}' ...
                , '\mu_{\logten(\eiso)}' ...
                , '\mu_{\logten(\durz)}' ...
                , '\sigma_{\logten(\liso)}' ...
                , '\sigma_{\logten(\epkz)}' ...
                , '\sigma_{\logten(\eiso)}' ...
                , '\sigma_{\logten(\durz)}' ...
                , '\rho_{\liso-\epkz}' ...
                , '\rho_{\liso-\eiso}' ...
                , '\rho_{\liso-\durz}' ...
                , '\rho_{\epkz-\eiso}' ...
                , '\rho_{\epkz-\durz}' ...
                , '\rho_{\eiso-\durz}' ...
                , '\mu_{th}' ...
                , '\sigma_{th}' ...
                };

TableRow = cell(nvar-1,1);
for ivar = 1:nvar-1
    ivarpo = ivar + 1;
    TableRow{ivar} =    [ '$' ...
                        , VarNameLatex{ivar} ...
                        , '$ & $' ...
                        ...
                        , sprintf('%.2f',round(ParaPost{1}.Avg(ivarpo),2)) ...
                        , '\pm' ...
                        , sprintf('%.2f',round(ParaPost{1}.Std(ivarpo),2)) ...
                        ...
                        , '$ & $' ...
                        ...
                        , sprintf('%.2f',round(ParaPost{2}.Avg(ivarpo),2)) ...
                        , '\pm' ...
                        , sprintf('%.2f',round(ParaPost{2}.Std(ivarpo),2)) ...
                        ...
                        , '$ & $' ...
                        ...
                        , sprintf('%.2f',round(ParaPost{3}.Avg(ivarpo),2)) ...
                        , '\pm' ...
                        , sprintf('%.2f',round(ParaPost{3}.Std(ivarpo),2)) ...
                        ...
                        , '$ \\' ...
                        ];
end
LaTable =   { '\hline' ...
            , '\multicolumn{4}{c}{Location Parameters($\Mean$)} \\' ...
            , '\hline' ...
            , TableRow{1} ...
            , TableRow{3} ...
            , TableRow{2} ...
            , TableRow{4} ...
            , '\hline' ...
            , '\multicolumn{4}{c}{Scale Parameters (diagonal elements of $\CovMat$)} \\' ...
            , '\hline' ...
            , TableRow{5} ...
            , TableRow{6} ...
            , TableRow{7} ...
            , TableRow{8} ...
            , '\hline' ...
            , '\multicolumn{4}{c}{Correlation Coefficients (non-diagonal elements of $\CovMat$)} \\' ...
            , '\hline' ...
            , TableRow{9} ...
            , TableRow{10} ...
            , TableRow{11} ...
            , TableRow{12} ...
            , TableRow{13} ...
            , TableRow{14} ...
            , '\hline' ...
            , '\multicolumn{4}{c}{BATSE Detection Efficiency (Sample Incompleteness)} \\' ...
            , '\hline' ...
            , TableRow{15} ...
            , TableRow{16} ...
            };
% write to output file
fid = fopen([outPath,'paraPostLatexTableContents.txt'],'w');
fprintf(fid,'%s\n',LaTable{:});
fclose(fid);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% plot variable histograms
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

fontSize = 14;
for ivar = 1:nvar
    disp(['Generating image # ',num2str(ivar)]);
    figure('visible','off','Color','none');
    hold on; box on;
    for iFile = 1:nFile
        histogram   ( ParaPost{iFile}.Sample.data(:,ivar) ...
                    , 'EdgeColor', 'none' ...
                    )
    end
    xlabel(VarNameMatlab{ivar}, 'Interpreter', 'tex', 'fontSize', fontSize)
    ylabel('MCMC Sample count', 'Interpreter', 'tex', 'fontSize', fontSize)
    %set(gca,'xscale','log')
    %set(gca,'yscale','log')
    legend  ( LegendName{:} ...
            , 'location' , 'northwest' ...
            , 'fontSize' , fontSize ...
            , 'color' , 'none' ...
            )
    set(gca,'color','none','FontSize',fontSize+2)
    set(gcf,'color','none')
    if strcmp(ParaPost{iFile}.Sample.colheaders{ivar}(1:5),'atanh')
        varName = ['c',ParaPost{iFile}.Sample.colheaders{ivar}(7:end)];
    else
        varName = ParaPost{iFile}.Sample.colheaders{ivar};
    end
    export_fig ([outPath,varName,'.png'],'-m2 -transparent')
    %export_fig ([outPath,varName,'.pdf'],'-q101 -transparent')
    %print(gcf, '-dpdf', [outPath,varName,'.pdf']); 
    hold off;
    close(gcf);
end
